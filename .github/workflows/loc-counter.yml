name: Update Lines of Code Statistics

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC

permissions:
  contents: write  # Needed to push changes back to repo

jobs:
  update-loc:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Install tokei
      run: cargo install tokei
      
    - name: Generate LOC statistics
      run: |
        echo "Generating LOC statistics..."
        tokei . -o json > loc-stats.json
        
    - name: Parse LOC data and update README
      run: |
        python3 << 'EOF'
        import json
        import re
        from datetime import datetime
        from pathlib import Path
        
        # Read the tokei JSON output
        with open('loc-stats.json', 'r') as f:
            data = json.load(f)
        
        # Generate SVG table
        languages = {k: v for k, v in data.items() if k != 'Total' and isinstance(v, dict) and v.get('code', 0) > 0}
        sorted_languages = sorted(languages.items(), key=lambda x: x[1]['code'], reverse=True)
        
        svg_width = 900
        svg_height = 50 + (len(sorted_languages) + 2) * 30
        
        svg = f'''<svg width="{svg_width}" height="{svg_height}" xmlns="http://www.w3.org/2000/svg">
          <style>
            text {{ font-family: 'Courier New', monospace; font-size: 12px; }}
            .header {{ font-weight: bold; fill: white; }}
            .row {{ fill: #2d2d2d; }}
            .total {{ font-weight: bold; fill: #ffd700; }}
            rect.header {{ fill: #333; }}
            rect.alt {{ fill: #1a1a1a; }}
          </style>
          <defs>
            <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">
              <stop offset="0%" style="stop-color:#222;stop-opacity:1" />
              <stop offset="100%" style="stop-color:#444;stop-opacity:1" />
            </linearGradient>
          </defs>
          <rect width="{svg_width}" height="{svg_height}" fill="url(#grad1)"/>
          <rect y="0" width="{svg_width}" height="30" fill="#333"/>
          <text x="10" y="20" class="header">Language</text>
          <text x="200" y="20" class="header">Code</text>
          <text x="350" y="20" class="header">Comments</text>
          <text x="520" y="20" class="header">Blanks</text>
          <text x="680" y="20" class="header">Total</text>
        '''
        
        y_pos = 50
        for lang, stats in sorted_languages:
            code = stats['code']
            comments = stats['comments']
            blanks = stats['blanks']
            total = code + comments + blanks
            
            svg += f'''  <text x="10" y="{y_pos}" class="row">{lang}</text>
          <text x="200" y="{y_pos}" class="row" text-anchor="end">{code:,}</text>
          <text x="350" y="{y_pos}" class="row" text-anchor="end">{comments:,}</text>
          <text x="520" y="{y_pos}" class="row" text-anchor="end">{blanks:,}</text>
          <text x="680" y="{y_pos}" class="row" text-anchor="end">{total:,}</text>
        '''
            y_pos += 30
        
        # Add total row
        if 'Total' in data:
            total_stats = data['Total']
            code = total_stats['code']
            comments = total_stats['comments']
            blanks = total_stats['blanks']
            total = code + comments + blanks
            
            svg += f'''  <rect y="{y_pos - 10}" width="{svg_width}" height="30" fill="#444"/>
          <text x="10" y="{y_pos}" class="total">Total</text>
          <text x="200" y="{y_pos}" class="total" text-anchor="end">{code:,}</text>
          <text x="350" y="{y_pos}" class="total" text-anchor="end">{comments:,}</text>
          <text x="520" y="{y_pos}" class="total" text-anchor="end">{blanks:,}</text>
          <text x="680" y="{y_pos}" class="total" text-anchor="end">{total:,}</text>
        '''
        
        svg += '</svg>'
        
        with open('loc-stats.svg', 'w') as f:
            f.write(svg)
        
        print("LOC statistics SVG generated!")
        EOF
        python3 << 'EOF'
        import json
        import re
        from datetime import datetime
        
        # Read the tokei JSON output
        with open('loc-stats.json', 'r') as f:
            data = json.load(f)
        
        # Create markdown table
        markdown_table = "## ðŸ“Š Lines of Code Statistics\n\n"
        markdown_table += "| Language | Code Lines | Comments | Blanks | Total Lines |\n"
        markdown_table += "|----------|:----------:|:--------:|:------:|:-----------:|\n"
        languages = {k: v for k, v in data.items() if k != 'Total' and isinstance(v, dict)}
        sorted_languages = sorted(languages.items(), key=lambda x: x[1]['code'], reverse=True)
        
        # Add each language row
        for lang, stats in sorted_languages:
            code = stats['code']
            comments = stats['comments']
            blanks = stats['blanks']
            total = code + comments + blanks
            markdown_table += f"\n| {lang} | {code:,} | {comments:,} | {blanks:,} | {total:,} |"
        
        # Add total row
        if 'Total' in data:
            total_stats = data['Total']
            code = total_stats['code']
            comments = total_stats['comments']
            blanks = total_stats['blanks']
            total = code + comments + blanks
            markdown_table += f"\n| **Total** | **{code:,}** | **{comments:,}** | **{blanks:,}** | **{total:,}** |"
        
        # Add timestamp
        timestamp = datetime.now().strftime("%B %d, %Y at %H:%M UTC")
        markdown_table += f"\n\n*Last updated: {timestamp}*\n"
        
        # Read current README
        try:
            with open('README.md', 'r') as f:
                readme_content = f.read()
        except FileNotFoundError:
            print("README.md not found, creating new one...")
            readme_content = """# Project Name
        
        <!-- LOC-START -->
        <!-- LOC-END -->
        """
        
        # Replace content between markers
        pattern = r'<!-- LOC-START -->.*?<!-- LOC-END -->'
        replacement = f'<!-- LOC-START -->{markdown_table}<!-- LOC-END -->'
        
        if '<!-- LOC-START -->' in readme_content and '<!-- LOC-END -->' in readme_content:
            new_content = re.sub(pattern, replacement, readme_content, flags=re.DOTALL)
        else:
            # Add markers at the end if they don't exist
            new_content = readme_content.rstrip() + '\n\n' + replacement + '\n'
        
        # Write updated README
        with open('README.md', 'w') as f:
            f.write(new_content)
            
        print("README.md updated successfully!")
        
        # Create total LOC for badge (optional)
        if 'Total' in data:
            total_loc = data['Total']['code']
            with open('total-loc.txt', 'w') as f:
                f.write(str(total_loc))
            print(f"Total LOC: {total_loc:,}")
        EOF
        
    - name: Commit and push changes
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "ðŸ“Š Update LOC statistics [automated]"
        file_pattern: "README.md loc-stats.svg"
        commit_user_name: "github-actions[bot]"
        commit_user_email: "github-actions[bot]@users.noreply.github.com"
        
    - name: Clean up temporary files
      run: |
        rm -f total-loc.txt
        
    - name: Display summary
      run: |
        echo "âœ… LOC statistics updated successfully!"
        echo "ðŸ“ˆ Check your README.md for the latest statistics."
