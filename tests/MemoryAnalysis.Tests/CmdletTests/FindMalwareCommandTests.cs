using Xunit;
using PowerShell.MemoryAnalysis.Cmdlets;
using PowerShell.MemoryAnalysis.Models;
using System.Management.Automation;
using System.Text.Json;

namespace MemoryAnalysis.Tests.CmdletTests
{
    public class FindMalwareCommandTests
    {
        [Fact]
        public void Constructor_ShouldInitialize()
        {
            // Arrange & Act
            var cmdlet = new FindMalwareCommand();

            // Assert
            Assert.NotNull(cmdlet);
        }

        [Fact]
        public void MemoryDump_Property_CanBeSet()
        {
            // Arrange
            var cmdlet = new FindMalwareCommand();
            var testDump = new MemoryDump
            {
                Path = @"C:\test\memory.dmp",
                SizeBytes = 1024 * 1024,
                LoadedAt = DateTime.Now
            };

            // Act
            cmdlet.MemoryDump = testDump;

            // Assert
            Assert.Equal(testDump, cmdlet.MemoryDump);
        }

        [Fact]
        public void Cmdlet_HasCorrectCmdletAttribute()
        {
            // Arrange
            var cmdletAttribute = typeof(FindMalwareCommand)
                .GetCustomAttributes(typeof(CmdletAttribute), false)
                .FirstOrDefault() as CmdletAttribute;

            // Assert
            Assert.NotNull(cmdletAttribute);
            Assert.Equal("Find", cmdletAttribute?.VerbName);
            Assert.Equal("Malware", cmdletAttribute?.NounName);
        }

        [Fact]
        public void MalwareDetection_Deserialization_WithValidJson_Succeeds()
        {
            // Arrange
            var json = @"{
                ""pid"": 1234,
                ""process_name"": ""suspicious.exe"",
                ""detection_type"": ""Injection"",
                ""severity"": ""High"",
                ""confidence"": 90,
                ""indicators"": [""hollowing"", ""suspended_thread""],
                ""details"": ""Process hollowing detected""
            }";

            // Act
            var detection = JsonSerializer.Deserialize<MalwareDetection>(json);

            // Assert
            Assert.NotNull(detection);
            Assert.Equal(1234u, detection.Pid);
            Assert.Equal("suspicious.exe", detection.ProcessName);
            Assert.Equal("Injection", detection.DetectionType);
            Assert.Equal("High", detection.Severity);
            Assert.Equal(90, detection.Confidence);
            Assert.Equal(2, detection.Indicators.Count);
            Assert.Contains("hollowing", detection.Indicators);
        }

        [Theory]
        [InlineData("High")]
        [InlineData("Medium")]
        [InlineData("Low")]
        public void MalwareDetection_SeverityLevels_AreSupported(string severity)
        {
            // Arrange
            var json = $@"{{
                ""pid"": 1234,
                ""process_name"": ""test.exe"",
                ""detection_type"": ""Test"",
                ""severity"": ""{severity}"",
                ""confidence"": 50,
                ""indicators"": [],
                ""details"": ""Test""
            }}";

            // Act
            var detection = JsonSerializer.Deserialize<MalwareDetection>(json);

            // Assert
            Assert.NotNull(detection);
            Assert.Equal(severity, detection.Severity);
        }
    }
}
