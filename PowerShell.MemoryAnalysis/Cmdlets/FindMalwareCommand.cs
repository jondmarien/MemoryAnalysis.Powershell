using System;
using System.Linq;
using System.Management.Automation;
using Microsoft.Extensions.Logging;
using PowerShell.MemoryAnalysis.Models;
using PowerShell.MemoryAnalysis.Services;

namespace PowerShell.MemoryAnalysis.Cmdlets;

/// <summary>
/// <para type="synopsis">Detects potential malware in a memory dump.</para>
/// <para type="description">
/// The Find-Malware cmdlet uses Volatility 3's Malfind plugin to detect
/// code injection and suspicious memory regions that may indicate malware.
/// </para>
/// </summary>
[Cmdlet(VerbsCommon.Find, "Malware")]
[OutputType(typeof(MalwareDetection))]
public class FindMalwareCommand : PSCmdlet
{
    private ILogger<FindMalwareCommand>? _logger;
    private RustInteropService? _rustInterop;

    /// <summary>
    /// Memory dump to analyze.
    /// </summary>
    [Parameter(Mandatory = true, ValueFromPipeline = true)]
    [ValidateNotNull]
    public MemoryDump? MemoryDump { get; set; }

    /// <summary>
    /// Filter by severity level (Low, Medium, High, Critical).
    /// </summary>
    [Parameter]
    [ValidateSet("Low", "Medium", "High", "Critical")]
    public string? Severity { get; set; }

    /// <summary>
    /// Minimum confidence score (0-100).
    /// </summary>
    [Parameter]
    [ValidateRange(0, 100)]
    public byte? MinimumConfidence { get; set; }

    /// <summary>
    /// Filter by specific Process ID.
    /// </summary>
    [Parameter]
    public uint? Pid { get; set; }

    protected override void BeginProcessing()
    {
        _logger = LoggingService.GetLogger<FindMalwareCommand>();
        _rustInterop = new RustInteropService();
    }

    protected override void ProcessRecord()
    {
        if (MemoryDump == null) return;

        try
        {
            var progress = new ProgressRecord(1, "Detecting Malware", 
                $"Scanning {MemoryDump.FileName} (may take 1-2 minutes)...") { PercentComplete = -1 };
            WriteProgress(progress);
            
            _logger?.LogInformation("Detecting malware in: {Path}", MemoryDump.Path);

            var detections = _rustInterop!.DetectMalware(MemoryDump.Path);
            
            progress.StatusDescription = $"Analyzing {detections.Length} detections...";
            progress.PercentComplete = 100;
            WriteProgress(progress);

            // Apply filters
            var filtered = detections.AsEnumerable();

            if (!string.IsNullOrEmpty(Severity))
            {
                filtered = filtered.Where(d => d.Severity.Equals(Severity, StringComparison.OrdinalIgnoreCase));
            }

            if (MinimumConfidence.HasValue)
            {
                filtered = filtered.Where(d => d.Confidence >= MinimumConfidence.Value);
            }

            if (Pid.HasValue)
            {
                filtered = filtered.Where(d => d.Pid == Pid.Value);
            }

            foreach (var detection in filtered)
            {
                WriteObject(detection);
            }

            // Log summary
            var resultCount = filtered.Count();
            if (resultCount == 0)
            {
                WriteVerbose("No malware detected matching the specified criteria.");
            }
            else
            {
                WriteVerbose($"Found {resultCount} potential malware detection(s).");
            }
            
            progress.RecordType = ProgressRecordType.Completed;
            WriteProgress(progress);
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error detecting malware");
            WriteError(new ErrorRecord(
                ex,
                "MalwareDetectionFailed",
                ErrorCategory.InvalidOperation,
                MemoryDump));
        }
    }

    protected override void EndProcessing()
    {
        _rustInterop?.Dispose();
    }
}