using System;
using System.Collections.Generic;

namespace PowerShell.MemoryAnalysis.Models;

/// <summary>
/// Represents a potential malware detection result.
/// </summary>
public class MalwareResult
{
    /// <summary>
    /// Unique identifier for this detection.
    /// </summary>
    public string Id { get; set; } = Guid.NewGuid().ToString();

    /// <summary>
    /// Process ID associated with the malware.
    /// </summary>
    public uint Pid { get; set; }

    /// <summary>
    /// Process name.
    /// </summary>
    public string ProcessName { get; set; } = string.Empty;

    /// <summary>
    /// Detection type (e.g., "Code Injection", "Hidden Process", "Suspicious DLL").
    /// </summary>
    public string DetectionType { get; set; } = string.Empty;

    /// <summary>
    /// Threat severity level.
    /// </summary>
    public ThreatSeverity Severity { get; set; } = ThreatSeverity.Low;

    /// <summary>
    /// Confidence score (0-100).
    /// </summary>
    public int ConfidenceScore { get; set; }

    /// <summary>
    /// Detailed description of the finding.
    /// </summary>
    public string Description { get; set; } = string.Empty;

    /// <summary>
    /// Evidence supporting this detection.
    /// </summary>
    public List<string> Evidence { get; set; } = [];

    /// <summary>
    /// Volatility plugin that generated this finding.
    /// </summary>
    public string SourcePlugin { get; set; } = string.Empty;

    /// <summary>
    /// Memory address or offset related to the detection.
    /// </summary>
    public string? MemoryAddress { get; set; }

    /// <summary>
    /// File path if applicable.
    /// </summary>
    public string? FilePath { get; set; }

    /// <summary>
    /// Associated registry keys if applicable.
    /// </summary>
    public List<string> RegistryKeys { get; set; } = [];

    /// <summary>
    /// Network indicators (IPs, domains, etc.).
    /// </summary>
    public List<string> NetworkIndicators { get; set; } = [];

    /// <summary>
    /// Recommended actions.
    /// </summary>
    public List<string> RecommendedActions { get; set; } = [];

    /// <summary>
    /// Timestamp of detection.
    /// </summary>
    public DateTime DetectedAt { get; set; } = DateTime.Now;

    /// <summary>
    /// Additional metadata.
    /// </summary>
    public Dictionary<string, string> Metadata { get; set; } = [];

    /// <summary>
    /// Get a summary string.
    /// </summary>
    public override string ToString()
    {
        return $"[{Severity}] {DetectionType} - {ProcessName} (PID: {Pid}) - Confidence: {ConfidenceScore}%";
    }
}

/// <summary>
/// Threat severity levels.
/// </summary>
public enum ThreatSeverity
{
    /// <summary>
    /// Low severity - informational finding.
    /// </summary>
    Low = 0,

    /// <summary>
    /// Medium severity - suspicious activity.
    /// </summary>
    Medium = 1,

    /// <summary>
    /// High severity - likely malware.
    /// </summary>
    High = 2,

    /// <summary>
    /// Critical severity - confirmed malware or active attack.
    /// </summary>
    Critical = 3
}
